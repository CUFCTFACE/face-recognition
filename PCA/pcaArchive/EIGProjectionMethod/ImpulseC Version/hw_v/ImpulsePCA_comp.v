/* ****************************************
   DO NOT EDIT
   This file was automatically generated by the Impulse C Compiler.
   
   Impulse C is Copyright 2002-2009, Impulse Accelerated Technologies, Inc.
   
   Stage Master is Copyright 2002-2009, Green Mountain Computing Systems, Inc.
   
   All rights reserved.
   
   ****************************************
 */

module Recognition (
  reset,
  sclk,
  clk,
  p_input_stream_rdy,
  p_input_stream_en,
  p_input_stream_eos,
  p_input_stream_data,
  p_output_stream_rdy,
  p_output_stream_en,
  p_output_stream_eos,
  p_output_stream_data);

  input reset;
  input sclk;
  input clk;
  input p_input_stream_rdy;
  output p_input_stream_en;
  input p_input_stream_eos;
  input [31:0] p_input_stream_data;
  input p_output_stream_rdy;
  output p_output_stream_en;
  output p_output_stream_eos;
  output [31:0] p_output_stream_data;
  wire reset;
  wire sclk;
  wire clk;
  wire p_input_stream_rdy;
  reg p_input_stream_en;
  wire p_input_stream_eos;
  wire [31:0] p_input_stream_data;
  wire p_output_stream_rdy;
  reg p_output_stream_en;
  reg p_output_stream_eos;
  reg [31:0] p_output_stream_data;

  parameter
    stateType_init = 0,
    stateType_b0s0 = 1,
    stateType_b1s0 = 2,
    stateType_b1s1 = 3,
    stateType_b2s0 = 4,
    stateType_b3s0 = 5,
    stateType_finished = 6;

  integer thisState;
  integer nextState;
  wire stateEn;
  reg newState;
  reg [31:0] r_input_stream;
  reg [31:0] r_s;
  wire [31:0] ni84_s;
  reg [31:0] r_suif_tmp;
  wire [31:0] ni83_suif_tmp;

  always @(posedge clk)
    if (reset) thisState <= stateType_init;
    else if (stateEn) thisState <= nextState;

  assign
    stateEn = (thisState == stateType_b1s0 & p_input_stream_rdy == 0) ? 0 : 
      (thisState == stateType_b1s1 & p_output_stream_rdy == 0) ? 0 : 
      (thisState == stateType_b2s0 & (p_input_stream_eos & p_output_stream_rdy) == 0) ? 0 : 1;

  always @(ni83_suif_tmp or thisState)
    case (thisState)
    stateType_init:
      begin
        nextState = stateType_b0s0;
      end
    stateType_b0s0:
      begin
        nextState = stateType_b1s0;
      end
    stateType_b1s0:
      begin
        if (~ ni83_suif_tmp[0])
        begin
          nextState = stateType_b2s0;
        end
        else
        begin
          nextState = stateType_b1s1;
        end
      end
    stateType_b1s1:
      begin
        nextState = stateType_b1s0;
      end
    stateType_b2s0:
      begin
        nextState = stateType_b0s0;
      end
    stateType_b3s0:
      begin
        nextState = stateType_finished;
      end
    stateType_finished:
      begin
        nextState = stateType_finished;
      end
    default:
      begin
        nextState = stateType_init;
      end
    endcase

  always @(posedge clk)
    if (reset) newState <= 1;
    else newState <= stateEn;

/* b0s0 */

/* b1s0 */
  assign
    ni83_suif_tmp = {31'h 0, ({1'h 0, {1'h 0, p_input_stream_eos}} == 3'h 0)};

/* b1s1 */
  assign
    ni84_s = r_input_stream;

/* b2s0 */

/* b3s0 */

/*  */


  always @(posedge clk)
    begin
      case (thisState)
      stateType_b1s0:
        begin
          if (stateEn)
          begin
            r_suif_tmp <= ni83_suif_tmp;
          end
        end
      default:
        begin
        end
      endcase
    end

  always @(posedge clk)
    begin
      case (thisState)
      stateType_b1s1:
        begin
          if (stateEn)
          begin
            r_s <= ni84_s;
          end
        end
      default:
        begin
        end
      endcase
    end

/* "input_stream" interface signals */
  always @(posedge clk)
    if (p_input_stream_en & p_input_stream_rdy) r_input_stream <= p_input_stream_data;

  always @(thisState or p_input_stream_eos or stateEn)
    if (thisState == stateType_b1s0) p_input_stream_en <= stateEn & ~ p_input_stream_eos;
    else if (thisState == stateType_b2s0) p_input_stream_en <= stateEn | ~ p_input_stream_eos;
    else p_input_stream_en <= 0;


/* "output_stream" interface signals */
  always @(thisState or stateEn)
    if (thisState == stateType_b1s1) p_output_stream_en <= stateEn;
    else if (thisState == stateType_b2s0) p_output_stream_en <= stateEn;
    else p_output_stream_en <= 0;

  always @(ni84_s)
    p_output_stream_data <= ni84_s;

  always @(thisState)
    if (thisState == stateType_b2s0) p_output_stream_eos <= 1;
    else p_output_stream_eos <= 0;


endmodule

